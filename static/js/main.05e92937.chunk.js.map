{"version":3,"sources":["TextInput.tsx","reducer.ts","validation.ts","App.tsx","actions.ts","serviceWorker.ts","index.tsx"],"names":["TextInput","error","label","name","value","onChange","onBlur","htmlFor","type","defaultState","values","surname","errors","formReducer","state","action","payload","fieldName","errorFieldName","App","useReducer","dispatch","handleTextFiledChange","e","currentTarget","setValue","handleTextFiledTouch","undefined","validateRequired","min","max","length","validateName","setError","disabled","Object","keys","every","k","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAYaA,EAA6B,SAAC,GAOpC,IANLC,EAMI,EANJA,MACAC,EAKI,EALJA,MACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,SACAC,EACI,EADJA,OAEA,OACE,oCACE,2BAAOC,QAASJ,GAAOD,EAAvB,KACA,2BAAOM,KAAK,OAAOL,KAAMA,EAAMC,MAAOA,EAAOC,SAAUA,EAAUC,OAAQA,IACxEL,GAAS,+BAAQA,K,cCjBXQ,EAAsB,CACjCC,OAN4B,CAC5BP,KAAM,GACNQ,QAAS,IAKTC,OAAQ,IAGGC,EAAc,SAACC,EAAcC,GACxC,OAAQA,EAAOP,MACb,IAAK,YAAL,MAC+BO,EAAOC,QAA5BC,EADV,EACUA,UAAWb,EADrB,EACqBA,MACnB,OAAO,eACFU,EADL,CAEEJ,OAAO,eAAMI,EAAMJ,OAAb,eAAsBO,EAAYb,MAC5C,IAAK,YAAL,MAC+CW,EAAOC,QAAjCE,EADrB,EACUD,UAA2BhB,EADrC,EACqCA,MACnC,OAAO,eACFa,EADL,CAEEF,OAAO,eAAME,EAAMF,OAAb,eAAsBM,EAAiBjB,MACjD,QACE,OAAOa,ICrBN,ICoDQK,EA9CO,WAAO,IAAD,EACAC,qBAAWP,EAAaJ,GADxB,mBACnBK,EADmB,KACZO,EADY,KAElBX,EAAmBI,EAAnBJ,OAAQE,EAAWE,EAAXF,OAEVU,EAAwB,SAACC,GAA0C,IAAD,EAC9CA,EAAEC,cAAlBrB,EAD8D,EAC9DA,KAAMC,EADwD,EACxDA,MACdiB,ECEoB,SAAyBJ,EAAcb,GAAvC,MAA6E,CACnGI,KAAM,YACNQ,QAAS,CAAEC,YAAWb,UDJXqB,CAAStB,EAAsBC,KAGpCsB,EAAuB,SAACH,GAA0C,IAAD,EAC7CA,EAAEC,cAAlBrB,EAD6D,EAC7DA,KACFF,EAfW,SAACG,GACpB,ODPK,SAA6BA,GAClC,OAAQA,OAAqBuB,EAAb,WCMTC,CAAiBxB,KDHKyB,ECGoB,EDHPC,ECGU,GDHM,SAAC1B,GAC3D,OAAOA,EAAM2B,OAASF,GAAOzB,EAAM2B,OAASD,EAAM,oBAAiBH,ICEXvB,GDH5B,IAACyB,EAAaC,ECiB1BE,CAFuD,EACvD5B,OACsB,KAAO,GAC3CiB,ECKoB,SAAyBJ,EAAchB,GAAvC,MAA6E,CACnGO,KAAM,YACNQ,QAAS,CAAEC,YAAWhB,UDPXgC,CAAS9B,EAAsBF,KAS1C,OACE,oCACE,kBAAC,EAAD,CACEC,MAAM,aACNC,KAAK,OACLC,MAAOM,EAAOP,KACdE,SAAUiB,EACVhB,OAAQoB,EACRzB,MAAOW,EAAOT,OAEhB,6BACA,kBAAC,EAAD,CACED,MAAM,YACNC,KAAK,UACLC,MAAOM,EAAOC,QACdN,SAAUiB,EACVhB,OAAQoB,EACRzB,MAAOW,EAAOD,UAEhB,6BACA,4BAAQH,KAAK,SAAS0B,UAzBNC,OAAOC,KAAK1B,GAC3B2B,OAAM,SAAAC,GAAC,MAAkB,KAAd1B,EAAO0B,OAwBnB,YEvCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.05e92937.chunk.js","sourcesContent":["import React from 'react';\nimport { Values } from './actions';\n\ntype Props = {\n  error?: string;\n  label: string;\n  name: keyof Values;\n  value: string;\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void;\n  onBlur: (e: React.FormEvent<HTMLInputElement>) => void;\n}\n\nexport const TextInput: React.FC<Props> = ({\n  error,\n  label,\n  name,\n  value,\n  onChange,\n  onBlur\n}) => {\n  return (\n    <>\n      <label htmlFor={name}>{label}:</label>\n      <input type='text' name={name} value={value} onChange={onChange} onBlur={onBlur}/>\n      {error && <label>{error}</label>}\n    </>\n)};\n","import { Values, State, Actions } from \"./actions\";\n\nconst defaultValues: Values = {\n  name: '',\n  surname: '',\n}\n\nexport const defaultState: State = {\n  values: defaultValues,\n  errors: {},\n}\n\nexport const formReducer = (state: State, action: Actions): State => {\n  switch (action.type) {\n    case 'SET-VALUE':\n      const { fieldName, value } = action.payload;\n      return {\n        ...state,\n        values: { ...state.values, [fieldName]: value } };\n    case 'SET-ERROR':\n      const { fieldName: errorFieldName, error } = action.payload;\n      return {\n        ...state,\n        errors: { ...state.errors, [errorFieldName]: error } };\n    default:\n      return state;\n  }\n}\n","export function validateRequired<T>(value: T): string | undefined {\n  return !value ? 'required' : undefined\n}\n\nexport const validateMinMax = (min: number, max: number) => (value: string): string | undefined => {\n  return value.length < min || value.length > max ? 'Wrong length' : undefined\n}","import React, { useReducer } from 'react';\nimport { TextInput } from './TextInput';\nimport { formReducer, defaultState } from './reducer';\nimport { setValue, Values, setError } from './actions';\nimport { validateRequired, validateMinMax } from './validation';\n\nconst validateName = (value: string): string | undefined => {\n  return validateRequired(value) || validateMinMax(1, 10)(value)\n}\n\nconst App: React.FC = () => {\n  const [state, dispatch] = useReducer(formReducer, defaultState);\n  const { values, errors } = state;\n\n  const handleTextFiledChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const { name, value } = e.currentTarget;\n    dispatch(setValue(name as keyof Values, value));\n  }\n\n  const handleTextFiledTouch = (e: React.FormEvent<HTMLInputElement>) => {\n    const { name, value } = e.currentTarget;\n    const error = validateName(value || '') || '';\n    dispatch(setError(name as keyof Values, error));\n  }\n  \n  const isFormValid = () => {\n    const noErrors = (Object.keys(values) as Array<keyof typeof values>)\n      .every(k => errors[k] === '');\n    return noErrors;\n  }\n\n  return (\n    <>\n      <TextInput\n        label='First name'\n        name='name'\n        value={values.name}\n        onChange={handleTextFiledChange}\n        onBlur={handleTextFiledTouch}\n        error={errors.name}\n      />\n      <br/>\n      <TextInput\n        label='Last name'\n        name='surname'\n        value={values.surname}\n        onChange={handleTextFiledChange}\n        onBlur={handleTextFiledTouch}\n        error={errors.surname}\n      />\n      <br/>\n      <button type='submit' disabled={!isFormValid()}>Submit</button>\n    </>\n  );\n}\n\nexport default App;\n","export type Values = {\n  name: string;\n  surname: string;\n}\n\nexport type Errors = {\n  [key in keyof Values]?: string;\n};\n\nexport type State = {\n  values: Values;\n  errors: Errors;\n}\n\ntype SetValueAction = {\n  type: 'SET-VALUE',\n  payload: { value: Values[keyof Values], fieldName: keyof Values }\n}\nexport const setValue = <T extends keyof Values>(fieldName: T, value: Values[T]): SetValueAction => ({\n  type: 'SET-VALUE',\n  payload: { fieldName, value }\n});\n\ntype SetErrorAction = {\n  type: 'SET-ERROR',\n  payload: { error: string, fieldName: keyof Values }\n}\nexport const setError = <T extends keyof Values>(fieldName: T, error: Values[T]): SetErrorAction => ({\n  type: 'SET-ERROR',\n  payload: { fieldName, error }\n});\n\n\nexport type Actions = SetErrorAction | SetValueAction;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}